---
title: "C√≥digo limpo"
subtitle: "Nomeando as coisas"
author: "Vicente Calfo"
format:
  revealjs:
    logo: http://www.sr2.uerj.br/inovuerj/images/logonova.gif
    footer: "C√≥digo Limpo - Nomeando as coisas"
---

# Use nomes significativos

## Legibilidade

Nomes bem escolhidos tornam o c√≥digo mais leg√≠vel. Quando algu√©m l√™ o c√≥digo, nomes descritivos facilitam a compreens√£o do prop√≥sito e da fun√ß√£o das partes do c√≥digo.

## Compreens√£o r√°pida

Nomes claros permitem que outros desenvolvedores (e at√© mesmo o pr√≥prio autor do c√≥digo em um momento posterior) entendam rapidamente o que uma vari√°vel, fun√ß√£o ou classe faz sem ter que examinar o c√≥digo em detalhes.

## Manuten√ß√£o simplificada

C√≥digo com nomes descritivos √© mais f√°cil de manter e atualizar. Quando voc√™ precisa fazer altera√ß√µes em um c√≥digo, nomes claros ajudam a identificar as partes que precisam ser modificadas.

## Comunica√ß√£o eficiente

Em equipes de desenvolvimento, nomes bem escolhidos facilitam a comunica√ß√£o. Os desenvolvedores podem discutir o c√≥digo de forma mais eficaz quando t√™m nomes significativos para se referir.

## Evitar coment√°rios excessivos

Nomes apropriados podem reduzir a necessidade de coment√°rios explicativos. Em vez de explicar o que uma vari√°vel faz em um coment√°rio, voc√™ pode usar um nome que transmita essa informa√ß√£o de maneira mais clara.

## Redu√ß√£o de erros

Nomes amb√≠guos ou gen√©ricos podem levar a erros de interpreta√ß√£o. Escolher nomes espec√≠ficos ajuda a evitar confus√µes e erros decorrentes de interpreta√ß√µes equivocadas.

## Padr√µes de design

Ao seguir conven√ß√µes de nomenclatura e padr√µes de design, voc√™ cria um c√≥digo mais consistente e facilita a identifica√ß√£o de elementos comuns.

## üëá

```js
function bolus(gm, ga, dtnu24) {
    const fs = dtnu24 / 1700;
    return (gm - ga) / fs;
}
```
- Nome da fun√ß√£o n√£o diz o que ela faz;
- N√∫meros "m√°gicos";
- Abrevia√ß√µes;

# N√∫meros "m√°gicos" üßô‚Äç‚ôÇÔ∏è

Valores literais que s√£o usados diretamente no c√≥digo, sem uma explica√ß√£o ou contexto adequados.

## Falta de clareza

Quando um n√∫mero √© usado diretamente em v√°rias partes do c√≥digo, n√£o fica claro qual √© o significado desse n√∫mero. Isso pode levar a confus√£o e interpreta√ß√µes erradas.

## Dificuldade de manuten√ß√£o

Se voc√™ precisar fazer uma altera√ß√£o no valor em v√°rios lugares do c√≥digo, ser√° necess√°rio localizar e atualizar cada ocorr√™ncia do n√∫mero m√°gico. Isso aumenta a chance de erros e torna a manuten√ß√£o mais trabalhosa.

## Fragilidade

N√∫meros m√°gicos tornam o c√≥digo fr√°gil porque, se o valor precisar ser alterado, voc√™ pode esquecer de atualiz√°-lo em todos os lugares apropriados. Isso pode resultar em comportamento inesperado do programa.

## Falta de documenta√ß√£o

Quando n√∫meros m√°gicos s√£o usados sem coment√°rios explicativos, n√£o h√° documenta√ß√£o adequada do que esses valores representam, o que dificulta a compreens√£o futura.

# Abrevia√ß√µes

Tornam o c√≥digo menos leg√≠vel. Quando voc√™ ou outros desenvolvedores revisarem o c√≥digo, pode ser dif√≠cil entender o significado das abrevia√ß√µes, o que leva a confus√µes.

- Dificulta a manuten√ß√£o;
- Atrapalha a compreens√£o r√°pida;
- Podem n√£o seguir padroniza√ß√£o (abrvia√ß√µes podem ser amb√≠guas);
- Obriga o mapeamento mental;

## Vamos olhar o c√≥digo novamenteüëá

```js
function bolus(gm, ga, dtnu24) {
    const fs = dtnu24 / 1700;
    return (gm - ga) / fs;
}
```


```js
gm = glicemia no momento
ga = gicemia alvo
dtnu24 = dose total nas √∫ltima 24 horas
fs = fator de sensibilidade
```

## Refatorando

```js
function calcularBolusDeInsulina(
    glicemiaAtualEmMGDL,
    glicemiaAlvoEmMGDL,
    totalDeUnidadesNasUltimas24H) {
    const fatorDaInsulina = 1700;
    const fatorDeSensibilidade = totalDeUnidadesNasUltimas24H / fatorDaInsulina;
    return (glicemiaAtualEmMGDL - glicemiaAlvoEmMGDL) / fatorDeSensibilidade;
}
```

## Tente ser o mais claro poss√≠vel

Os nomes nunca devem induzir um desenvolvedor ao erro, ou seja, n√£o devem permitir interpreta√ß√µes d√∫bias.

üö® **Aten√ß√£o!**

```js
    buscarDadosDoUsuario();
    buscarInfoDoUsuario();
    // ou
    getUserData();
    getUserInfo();
```

## Escolha um idioma

Escolha um e siga o projeto!

- N√£o misture "ingl√™s" com "portugu√™s"! ü§¢

ü•∏ **Minha opini√£o!**

Frameworks, pacotes, bibliotecas e at√© mesmo a linguagem de programa√ß√£o est√£o em ingl√™s.
Portanto, √© natural manter a coer√™ncia e adotar o ingl√™s para os nomes em nosso c√≥digo, especialmente considerando a crescente internacionaliza√ß√£o das empresas.

# Nomeando classes e m√©todos

## Nome de classes

- Os nomes de classes devem refletir sua representa√ß√£o, em vez de suas a√ß√µes.
- √â importante que esses nomes sejam substantivos e n√£o verbos.