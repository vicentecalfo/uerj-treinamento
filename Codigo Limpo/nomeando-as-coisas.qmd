---
title: "C√≥digo limpo"
subtitle: "Nomeando as coisas"
author: "Vicente Calfo"
format:
  revealjs:
    logo: http://www.sr2.uerj.br/inovuerj/images/logonova.gif
    footer: "C√≥digo Limpo"
---

# Use nomes significativos

## Legibilidade

Nomes bem escolhidos tornam o c√≥digo mais leg√≠vel. Quando algu√©m l√™ o c√≥digo, nomes descritivos facilitam a compreens√£o do prop√≥sito e da fun√ß√£o das partes do c√≥digo.

```js

// Evite
var x = 256;

// Dura√ß√£o do que? Qual a m√©trica?
int duration = 25;

// Muito mais expressivo
int durationInMinutes = 25;

```

## Compreens√£o r√°pida

Nomes claros permitem que outros desenvolvedores (e at√© mesmo o pr√≥prio autor do c√≥digo em um momento posterior) entendam rapidamente o que uma vari√°vel, fun√ß√£o ou classe faz sem ter que examinar o c√≥digo em detalhes.

## Manuten√ß√£o simplificada

C√≥digo com nomes descritivos √© mais f√°cil de manter e atualizar. Quando voc√™ precisa fazer altera√ß√µes em um c√≥digo, nomes claros ajudam a identificar as partes que precisam ser modificadas.

## Comunica√ß√£o eficiente

Em equipes de desenvolvimento, nomes bem escolhidos facilitam a comunica√ß√£o. Os desenvolvedores podem discutir o c√≥digo de forma mais eficaz quando t√™m nomes significativos para se referir.Fa√ßa distin√ß√µes

**Fa√ßa distin√ß√µes significantes**

```js
// Evite üí©üëá
var salario = 7500;

// Tem um significado maior
var salarioEmReais = 7500;

// Total do que? üí©üëá 
decimal total = 0;

// Total do carrinho de compras
decimal shoppingCartTotal = 0;
```

## Evitar coment√°rios excessivos

Nomes apropriados podem reduzir a necessidade de coment√°rios explicativos. Em vez de explicar o que uma vari√°vel faz em um coment√°rio, voc√™ pode usar um nome que transmita essa informa√ß√£o de maneira mais clara.

#

```php
<?php

//Autentica usu√°rio
$this->autenticar($usuario, $senha);

// m√©todo construtor
public function __construct()
{
}

foreach($array as $key => $value) {
    if ($value === true) {
    } // Fim if
} // Fim foreach
```

# N√£o use coment√°rios para versionar o c√≥digo

USA O GIT OU SVN PELO AMOR DE DEUS! ü•∫

#

```php
<?php
private function exemplo()
{
   $gruposAcesso = explode(',', $_SESSION['GRUPOSACESSO']);

   /* 
     if (in_array(self::GRUPO_ADMINISTRADOR, $gruposAcesso)) {
         return true;
     }
     return false; 
   */

   return in_array(self::GRUPO_ADMINISTRADOR, $gruposAcesso);
}
```


## Redu√ß√£o de erros

Nomes amb√≠guos ou gen√©ricos podem levar a erros de interpreta√ß√£o. Escolher nomes espec√≠ficos ajuda a evitar confus√µes e erros decorrentes de interpreta√ß√µes equivocadas.
<br />

üí©üëá

```js
console.log(listaDeEspecies)
console.log(typeof listaDeEspecies)

// Manilkara decrescens, Parinari alvimii, Anomochloa marantoidea
// string

// refatorando: listaDeEspeciesSeparadasPorVirgula
```

## Corrija quando achar nomes melhores

Existe um est√°gio cl√°ssico de um software que √© quando o desenvolvedor ainda n√£o entendeu em detalhes o problema a ser resolvido ‚Äî que basicamente √© o estado inicial de qualquer c√≥digo ‚Äî e escolhe nomes n√£o t√£o bons.

## üí©üëá

```js
function bolus(gm, ga, dtnu24) {
    const fs = dtnu24 / 1700;
    return (gm - ga) / fs;
}
```
- Nome da fun√ß√£o n√£o diz o que ela faz;
- N√∫meros "m√°gicos";
- Abrevia√ß√µes;

# N√∫meros "m√°gicos" üßô‚Äç‚ôÇÔ∏è

Valores literais que s√£o usados diretamente no c√≥digo, sem uma explica√ß√£o ou contexto adequados.

## Falta de clareza

Quando um n√∫mero √© usado diretamente em v√°rias partes do c√≥digo, n√£o fica claro qual √© o significado desse n√∫mero. Isso pode levar a confus√£o e interpreta√ß√µes erradas.

#

üí©üëá
```php 
<?php
private function exemplo()
{
    $gruposAcesso = explode(',',$_SESSION['GRUPOSACESSO']);

    if (in_array(10, $gruposAcesso)) {
        return true;
    }

    return false;
}
```
#
```php 
<?php
const GRUPO_ADMINISTRADOR = 10;

private function deveExecutar()
{
    $gruposAcesso = explode(',',$_SESSION['GRUPOSACESSO']);

    if (in_array(self::GRUPO_ADMINISTRADOR, $gruposAcesso)) {
        return true;
    }

    return false;
}
```

## Dificuldade de manuten√ß√£o

Se voc√™ precisar fazer uma altera√ß√£o no valor em v√°rios lugares do c√≥digo, ser√° necess√°rio localizar e atualizar cada ocorr√™ncia do n√∫mero m√°gico. Isso aumenta a chance de erros e torna a manuten√ß√£o mais trabalhosa.

## Fragilidade

N√∫meros m√°gicos tornam o c√≥digo fr√°gil porque, se o valor precisar ser alterado, voc√™ pode esquecer de atualiz√°-lo em todos os lugares apropriados. Isso pode resultar em comportamento inesperado do programa.

```js

// Evite üí©üëá
if(environment == "PROD")
    ...

// Utilize
const string ENV = "PROD";

if(environment == ENV)
    ...

```

## Falta de documenta√ß√£o

Quando n√∫meros m√°gicos s√£o usados sem coment√°rios explicativos, n√£o h√° documenta√ß√£o adequada do que esses valores representam, o que dificulta a compreens√£o futura.

## Abrevia√ß√µes

Tornam o c√≥digo menos leg√≠vel. Quando voc√™ ou outros desenvolvedores revisarem o c√≥digo, pode ser dif√≠cil entender o significado das abrevia√ß√µes, o que leva a confus√µes.

- Dificulta a manuten√ß√£o;
- Atrapalha a compreens√£o r√°pida;
- Podem n√£o seguir padroniza√ß√£o (abrvia√ß√µes podem ser amb√≠guas);
- Obriga o mapeamento mental;

```js
const zc = address.zc; // o que √© zc??? zipcode (cep)?

address.zc;
address.zipc;
address.zcode;

üò°‚òùÔ∏è

```

## Vamos olhar o c√≥digo novamenteüëá

```js
function bolus(gm, ga, dtnu24) {
    const fs = dtnu24 / 1700;
    return (gm - ga) / fs;
}
```


```js
gm = glicemia no momento
ga = gicemia alvo
dtnu24 = dose total nas √∫ltima 24 horas
fs = fator de sensibilidade
```

## Refatorando

```js
function calcularBolusDeInsulina(
    glicemiaAtualEmMGDL,
    glicemiaAlvoEmMGDL,
    totalDeUnidadesNasUltimas24H) {
    const fatorDaInsulina = 1700;
    const fatorDeSensibilidade = totalDeUnidadesNasUltimas24H / fatorDaInsulina;
    return (glicemiaAtualEmMGDL - glicemiaAlvoEmMGDL) / fatorDeSensibilidade;
}
```

# N√£o escreva c√≥digos para agradar o interpretador ou compilador, escreva c√≥digos para agradar humanos!

## Tente ser o mais claro poss√≠vel

Os nomes nunca devem induzir um desenvolvedor ao erro, ou seja, n√£o devem permitir interpreta√ß√µes d√∫bias.

üö® **Aten√ß√£o!**

```js
    buscarDadosDoUsuario();
    buscarInfoDoUsuario();
    // ou
    getUserData();
    getUserInfo();
```

## Escolha um idioma

Escolha um e siga o projeto!

- N√£o misture "ingl√™s" com "portugu√™s"! ü§¢

ü•∏ **Minha opini√£o!**

Frameworks, pacotes, bibliotecas e at√© mesmo a linguagem de programa√ß√£o est√£o em ingl√™s.
Portanto, √© natural manter a coer√™ncia e adotar o ingl√™s para os nomes em nosso c√≥digo, especialmente considerando a crescente internacionaliza√ß√£o das empresas.

# üí©üëá

```js
// Codificando em ingl√™s üòä
public class CustomerRepository { ... }

// Agora mudou para "portugl√™s" ü•¥
public class ProdutoRepository { ... }

// Agora √© portugu√™s ü§î
public class RepositorioUnidadeMedida { ... }

// Utilizou sufixo ASYNC no m√©todo ass√≠ncrono üëå
public async Task<Product> GetAsync() { ... }

// Agora n√£o usou mais =/ üò†
public async Task<Course> Get() { ... }
```

## Padr√µes de design

Ao seguir conven√ß√µes de nomenclatura e padr√µes de design, voc√™ cria um c√≥digo mais consistente e facilita a identifica√ß√£o de elementos comuns.

# N√£o seja engra√ßado!

```js

killProcess();

//

fireInTheHole();

deusEstaNoComando();

```

# Nomeando fun√ß√µes, classes e m√©todos

## Nome de fun√ß√µes e m√©todos

O mais comum √© usar verbos para designar m√©todos e fun√ß√µes, mmas h√° casos que outra forma de express√£o pode ser √∫til.

## Imperativo ou infinitivo?

Depende do que sua equipe adotar como estilo. 

Apenas seja coerente!

```js

const resultadoDaSoma = somar(x,y); // infinitivo
// ou
const resultadoDaSoma = some(x,y); // imperativo

```
üö®

Muita confus√£o surge porque fun√ß√µes nomeadas em Ingl√™s podem ter tanto a conota√ß√£o de imperativo quanto de infinitivo. Por exemplo, execute() pode ser entendido tanto quanto to execute (executar, no infinitivo) quanto execute (execute, no imperativo).

## M√©todos getters e setters

- M√©todos devem ter verbos;

```js

setName();
getName();

employee.getName();
employee.setName('Matheus');

```
Se o m√©todo ou fun√ß√£o ir√° retornar um booleano √© comum ter uma constru√ß√£o espec√≠fica indicando uma capacidade. Ex.: is, can, has, isThere (alguns preferem usar s√≥ o has), allow (que pode ser o mesmo que can).

## Nome de classes

- Os nomes de classes devem refletir sua representa√ß√£o, em vez de suas a√ß√µes.
- √â importante que esses nomes sejam substantivos e n√£o verbos.

```js
Customer
WikiPage
Account
AddressParser

// üí©

Manager
Processor
Data
Info

```

## Escolha uma palavra por conceito

Escolha uma palavra para um conceito abstrato e fique com ela.

Por exemplo, √© confuso ter fetch, retrieve e get como m√©todos equivalentes de diferentes classes.

## N√£o adicione contexto gratuito

Imaginem uma aplica√ß√£o ser chamada de ProFlora.

Uma m√° ideia prefixar todas as classes com PRF. 

Exemplo: 

- PRFTaxon

- PRFOccurrence
