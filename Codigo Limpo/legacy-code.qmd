---
title: "Lidando com c√≥digo legado"
subtitle: "C√≥digo limpo"
author: "Vicente Calfo"
format:
  revealjs:
    logo: http://www.sr2.uerj.br/inovuerj/images/logonova.gif
    footer: "C√≥digo Limpo"
---

# Quatro raz√µes para mudar de software

* Adicionando um recurso
* Corrigindo um bug
* Melhorar o design (por exemplo, torn√°-lo mais f√°cil de entender, expressar inten√ß√£o)
* Otimizando o uso de recursos (por exemplo, consultas de banco de dados mais eficientes)

## O comportamento √© a coisa mais importante no software. Se n√£o conseguirmos o comportamento desejado, o software falhou.

## Mitigando Riscos

* Que mudan√ßas vamos fazer?
* Como saberemos que os fizemos corretamente?
* Como saberemos que n√£o quebramos nada?

Respota: **TESTANDO**

## Se voc√™ deseja alterar o c√≥digo legado com seguran√ßa, este √© o processo de alto n√≠vel:

* Identifique os pontos de mudan√ßa
* Encontre pontos de teste
* Quebre depend√™ncias (se necess√°rio)
* Escreva testes
* Fa√ßa altera√ß√µes e refatore

## As op√ß√µes:

* Editar e rezar pelo melhor; üí©
* Cobrir e modificar; üòé

# M√©todo Sprout (broto)

O M√©todo Sprout pode ser aplicado quando voc√™ n√£o tem tempo para testar o c√≥digo legado, mas precisa adicionar um NOVO recurso.

---

```javascript

const InternalizationService = {
	translate(key) { ... }

	// bunch more code here
}

```

- Este √© o InternalizationService que depende da configura√ß√£o global. 
- **Miss√£o:** Voc√™ precisa adicionar um novo recurso para formatar quantias de dinheiro.

---

```javascript
const InternalizationService = {
	translate(key) { ... }

	formatCurrency(amount){
        // Come√ßa a escrever seu c√≥digo aqui! üí©
    }
}
```
- N√£o aumenta a base de c√≥digo legada e N√ÇO testada;
- Escreva o c√≥digo isolado (em outro lugar) e usa DENTRO do c√≥digo legado.

---

```javascript
import { formatCurrency } from "./formatCurrency";

const InternalizationService = {
	translate(key) { ... }

	formatCurrency(amount){
        return formatCurrency(globalConfig.locale, this.language, amount); üòé
    }
}
```

**Vantagens:**

- Isolamento da nova funcionalidade (mais seguran√ßa na manuten√ß√£o);
- Possibilidade de criar testes unit√°rios para essa nova funcionalidade;

# M√©todo Wrapper (embrulho)

O M√©todo Wrap cumpre um prop√≥sito semelhante ao M√©todo Sprout. Quando voc√™ estiver sob press√£o de tempo, use este m√©todo ao adicionar um novo recurso ou modificar o c√≥digo existente sem testar primeiro o c√≥digo legado.

**Esta n√£o √© uma situa√ß√£o ideal, mas n√£o vivemos num mundo ideal.**

---

```typescript

class Employee {

    // faz outras coisas

    pay(): void {
        const amount: Money = new Money();
        for (const card of timecards) {
            if (this.payPeriod.contains(date)) {
                amount.add(card.getHours() * payRate);
            }
        }
        this.payDispatcher.pay(this, date, amount);
    }
}

```

- Neste m√©todo, estamos somando os cart√µes de ponto di√°rios de um funcion√°rio e, em seguida, enviando suas informa√ß√µes de pagamento para um PayDispatcher. 
- **Miss√£o:**  Toda vez que pagamos um funcion√°rio, precisamos atualizar um arquivo com o nome do funcion√°rio para que ele possa ser enviado a algum software de relat√≥rios.

---

```typescript

class Employee {

    // faz outras coisas

    pay(): void {
        const amount: Money = new Money();
        for (const card of timecards) {
            if (this.payPeriod.contains(date)) {
                amount.add(card.getHours() * payRate);
            }
        }
        this.payDispatcher.pay(this, date, amount);
        
        // Implementar o codigo de log üí©
    }
}

```

---


```typescript

class Employee {

    // faz outras coisas

    private dispatchPayment(): void {
        const amount: Money = new Money();
        for (const card of timecards) {
            if (this.payPeriod.contains(date)) {
                amount.add(card.getHours() * payRate);
            }
        }
        this.payDispatcher.pay(this, date, amount);
        
        // Implementar o codigo de log üí©
    }


    private logPayment() { // ... faz as coisas do log
    }
    pay(){
        this.logPayment();
        this.dispatchPayment();
    }
}

```

- No c√≥digo, renomeamos a fun√ß√£o `pay()` como `dispatchPayment()` e a tornamos privada.
- Criamos um novo m√©todo chamado `pay()` que chama a fun√ß√£o `dispatchPayment()`.
- Isso permite que os clientes que costumavam chamar `pay()` n√£o precisem saber ou se preocupar com a mudan√ßa.
- Eles simplesmente fazem sua chamada, e tudo funciona bem.


# Extract Method 

---

```javascript

updateQuality() {
  for (var i = 0; i < this.items.length; i++) {
    if (this.items[i].name != 'Aged Brie' && this.items[i].name != 'Backstage pass') {
      if (this.items[i].quality > 0) {
        if (this.items[i].name != 'Sulfuras, Hand of Ragnaros') {
          this.items[i].quality = this.items[i].quality - 1;
        }
      }
    } else {
      if (this.items[i].quality < 50) {
        this.items[i].quality = this.items[i].quality + 1;
        if (this.items[i].name == 'Backstage pass') {
          if (this.items[i].sellIn < 11) {
            if (this.items[i].quality < 50) {
              this.items[i].quality = this.items[i].quality + 1;
            }
          }
          if (this.items[i].sellIn < 6) {
            if (this.items[i].quality < 50) {
              this.items[i].quality = this.items[i].quality + 1;
            }
          }
        }
      }
    }
    if (this.items[i].name != 'Sulfuras, Hand of Ragnaros') {
      this.items[i].sellIn = this.items[i].sellIn - 1;
    }
    if (this.items[i].sellIn < 0) {
      if (this.items[i].name != 'Aged Brie') {
        if (this.items[i].name != 'Backstage pass') {
          if (this.items[i].quality > 0) {
            if (this.items[i].name != 'Sulfuras, Hand of Ragnaros') {
              this.items[i].quality = this.items[i].quality - 1;
            }
          }
        } else {
          this.items[i].quality = this.items[i].quality - this.items[i].quality;
        }
      } else {
        if (this.items[i].quality < 50) {
          this.items[i].quality = this.items[i].quality + 1;
        }
      }
    }
  }
  return this.items;
}

```
---

# ... e a√≠ vc precisa dar manuten√ß√£o nesse c√≥digo ...

<img src="https://media.tenor.com/l_goH8BAXdQAAAAM/sad-dog-sad.gif" />

---

```javascript

updateQuality() {
  for (var i = 0; i < this.items.length; i++) {
    this.atualizaUmItem(items[i]);
  }
  return this.items;
}

```
<br />

```javascript

atualizaUmItem(item) {
  if (item.name != 'Aged Brie' && item.name != 'Backstage pass') {
    if (item.quality > 0) {
      if (item.name != 'Sulfuras, Hand of Ragnaros') {
        item.quality = item.quality - 1;
      }
    }
  } else {
    if (item.quality < 50) {
      item.quality = item.quality + 1;
      if (item.name == 'Backstage pass') {
        if (item.sellIn < 11) {
          if (item.quality < 50) {
            item.quality = item.quality + 1;
          }
        }
        if (item.sellIn < 6) {
          if (item.quality < 50) {
            item.quality = item.quality + 1;
          }
        }
      }
    }
  }
  if (item.name != 'Sulfuras, Hand of Ragnaros') {
    item.sellIn = item.sellIn - 1;
  }
  if (item.sellIn < 0) {
    if (item.name != 'Aged Brie') {
      if (item.name != 'Backstage pass') {
        if (item.quality > 0) {
          if (item.name != 'Sulfuras, Hand of Ragnaros') {
            item.quality = item.quality - 1;
          }
        }
      } else {
        item.quality = item.quality - item.quality;
      }
    } else {
      if (item.quality < 50) {
        item.quality = item.quality + 1;
      }
    }
  }
}

```

## O que fizemos at√© agora ...

- A altera√ß√£o realizada foi extremamente simples.
- Extra√≠mos o conte√∫do do loop `for` para um m√©todo chamado `atualizaUmItem`.
- O m√©todo `atualizaUmItem` descreve a a√ß√£o que estava dentro do loop.
- Em vez de usar `this.items[i]` como valor, modificamos para usar o par√¢metro `item` que passamos.
- Dentro do loop `for`, invocamos o m√©todo `atualizaUmItem` com os devidos argumentos.

---

# Vamos olhar com mais calma o c√≥digo 

---

```javascript

if (item.name != 'Aged Brie' && item.name != 'Backstage pass') {
  if (item.quality > 0) {
    if (item.name != 'Sulfuras, Hand of Ragnaros') {
      item.quality = item.quality - 1;
    }
  }
} else {
  if (item.quality < 50) {
    item.quality = item.quality + 1;
    if (item.name == 'Backstage pass') {
      if (item.sellIn < 11) {
        if (item.quality < 50) {
          item.quality = item.quality + 1;
        }
      }
      if (item.sellIn < 6) {
        if (item.quality < 50) {
          item.quality = item.quality + 1;
        }
      }
    }
  }
}

```

BAD SMELL: temos uma condicional negativa.

---

```javascript

if (item.name != 'Aged Brie' && item.name != 'Backstage pass') {
  // N√ÉO √â um Aged Brie E N√ÉO √â um Backstage pass
} else {
  // √â um Aged Brie OU √â um Backstage pass
}

```

- Condicionais negativas s√£o ruins, pois temos que pensar um pouco mais sobre o que est√° acontecendo no c√≥digo (mapeamento mental).
- Legibilidade ruim.

---

## Vamos inverter as coisas

```javascript
if (item.name == 'Aged Brie' || item.name == 'Backstage pass') {
  // √â um Aged Brie OU √â um Backstage pass
} else {
  // N√ÉO √â um Aged Brie E N√ÉO √â um Backstage pass
}
```

---

```javascript
if (item.name == 'Aged Brie' || item.name == 'Backstage pass') {
  if (item.quality < 50) {
    item.quality = item.quality + 1;
    if (item.name == 'Backstage pass') {
      if (item.sellIn < 11) {
        if (item.quality < 50) {
          item.quality = item.quality + 1;
        }
      }
      if (item.sellIn < 6) {
        if (item.quality < 50) {
          item.quality = item.quality + 1;
        }
      }
    }
  }
} else {
  if (item.quality > 0) {
    if (item.name != 'Sulfuras, Hand of Ragnaros') {
      item.quality = item.quality - 1;
    }
  }
}
```

O if supostamente deveria ter apenas uma responsabilidade!

Mas qual a responsabilidade do if? Talvez o nome atualizaAgedBrieOuBackstagePass?


# O if implementa a l√≥gica para os dois itens üò•

## Arrumando a casa üòÅ

- Como nossa condicional possui um ||, n√≥s podemos quebrar a segunda condi√ß√£o em um else if !
- Agora podemos separar a responsabilidade de cada um dos blocos em seu pr√≥prio m√©todo.

```javascript
if (item.name == 'Aged Brie') {
  atualizaItemAgedBrie();
} else if (item.name == 'Backstage pass') {
  atualizaItemBackstagePass();
} else { 
  atualizaItemPadrao();
}
```

---

**Exemplo real - extra√ß√£o de m√©todos**

```php

<?php

namespace cncflora\reports ;

class Occurrences {

  public $title = "Ocorr√™ncias";
  public $description = "Lista com todas as ocorr√™ncias do recorte por esp√©cie.";
  public $is_private = true;
  public $filters = ["checklist","family","species"];
  public $fields = ['familia aceita','nome aceito'];
  public $fields_array = array(
    "occurrenceID" => "id da ocorr√™ncia",
    "bibliographicCitation" => "literatura",
    "institutionCode" => "c√≥digo da institui√ß√£o",
    "collectionCode" => "c√≥digo da cole√ß√£o",
    "catalogNumber" => "n√∫mero de cat√°logo/c√≥digo de barras",
    "recordNumber" => "n√∫mero do coletor",
    "recordedBy" => "coletor",
    "year" => "ano da coleta",
    "month" => "m√™s da coleta",
    "day" => "dia da coleta",
    "identifiedBy" => "identificado por",
    "stateProvince" => "estado",
    "municipality" => "munic√≠pio",
    "locality" => "localidade",
    "decimalLatitude" => "latitude",
    "decimalLongitude" => "longitude",
    "family" => "fam√≠lia",
    "genus" => "g√™nero",
    "specificEpithet" => "ep√≠teto espec√≠fico",
    "infraspecificEpithet" => "variedade",
    "scientificName" => "nome cient√≠fico",
    "georeferenceRemarks" => "obs. de SIG",
    "georeferenceProtocol" => "geo protocolo",
    "georeferenceVerificationStatus" => "status SIG",
    "georeferencedBy" => "analista SIG",
    "coordinateUncertaintyInMeters" => "geo precis√£o",
    "valid" => "v√°lido",
    "validation_taxonomy" => "taxonomia v√°lida",
    "validation_cultivated" => "cultivada ex-situ",
    "validation_duplicated" => "registro de duplicata",
    "validation_native" => "nativa na localidade",
    "validation_georeference" => "georefer√™ncia v√°lida",
    "metadata_contributor" => "colaboradores",
    "metadata_modified" => "data da √∫ltima modifica√ß√£o",
    "remarks" => "observa√ß√µes",
    "ecology.biomas" => "Bioma",
    "taxonID" => "id do taxon",
    "taxonomicStatus" => "status taxon√¥mico",
    "concatCollectionCode_CatalogNumber" => "n√∫mero de tombo + acr√¥nimo da cole√ß√£o",
    "comments" => "coment√°rios",
    "occurrenceRemarks" => "observa√ß√µes da ocorr√™ncia"
  );


  public function __construct() {
    $this->fields = array_merge($this->fields, array_keys($this->fields_array));
  }

  function run($csv,$checklist,$family=null,$specie=null) {
    fputcsv($csv,$this->fields, ';');

    $repoOcc = new \cncflora\repository\Occurrences($checklist);
    $repoTaxon = new \cncflora\repository\Taxon($checklist);

    if($family==null) {
      $families = $repoTaxon->listFamilies();
    } else {
      $families = [$family];
    }

    $got=[];
    foreach($families as $f) {
      if($specie==null) {
        $spps = $repoTaxon->listFamily($f);
      } else {
        $spps = [$repoTaxon->getSpecie($specie)];
      }
      foreach($spps as $spp) {
        $names = $repoTaxon->listNames($spp['scientificNameWithoutAuthorship']);
        $occs  = $repoOcc->flatten($repoOcc->listOccurrences($names,false));
        foreach($occs as $occ) {
          $id = $occ['occurrenceID'];
          if(isset($got[$id])) {
            continue;
          }
          $got[$id]=true;
          $data  = [$f,$spp['scientificNameWithoutAuthorship']];
          foreach($this->fields_array as $k=>$n) {
            if(!isset($occ[$k])) $occ[$k]='';
            if($k == "concatCollectionCode_CatalogNumber")
                $occ[$k] = $occ['collectionCode'] . $occ['catalogNumber'];
            if($checklist=='livro_vermelho_2013') {
              $data[] = utf8_decode($occ[$k]);
            } else {
              $data[] = $occ[$k];
            }
          }
          fputcsv($csv,str_replace(array("\n", "\r"), ' ', str_replace(";", ",", $data)), ';');
        }
      }
    }

  }

}

```

## Problemas/Solu√ß√µes

**Remo√ß√£o de Atributos P√∫blicos**: Os atributos p√∫blicos como `$title`, `$description`, `$is_private`, `$filters`, `$fields`, e `$fields_array` foram modificados para serem privados.

Isso segue o princ√≠pio de encapsulamento, que sugere que os atributos devem ser privados para controlar o acesso a eles.


## Problemas/Solu√ß√µes

**Uso de "Early Return"**: Em vez de aninhar v√°rias instru√ß√µes `if` e `foreach`, utilizei o padr√£o "early return". Isso ajuda a evitar a profundidade excessiva de aninhamento e torna o c√≥digo mais leg√≠vel. Por exemplo, se `$family` for `null`, o c√≥digo verifica e lista todas as fam√≠lias. Em seguida, se `$specie` for `null`, ele lista todas as esp√©cies. Em cada um desses pontos, se a condi√ß√£o for atendida, o c√≥digo retorna imediatamente, evitando que o restante do c√≥digo seja executado desnecessariamente.


## Problemas/Solu√ß√µes

**Uso de Constantes para Strings Literais**: Em vez de usar strings literais diretamente, usei constantes ou vari√°veis para armazenar essas strings. Isso torna o c√≥digo mais leg√≠vel e evita poss√≠veis erros de digita√ß√£o ao longo do c√≥digo.


## Problemas/Solu√ß√µes

**Melhorias na Sa√≠da CSV**: A fun√ß√£o `fputcsv` foi usada para gerar a sa√≠da CSV, e eu adicionei uma substitui√ß√£o de caracteres de quebra de linha e ponto e v√≠rgula para evitar problemas com a formata√ß√£o CSV.


## Problemas/Solu√ß√µes

**Utiliza√ß√£o de UTF-8**: No c√≥digo original, h√° um tratamento especial para o checklist `'livro_vermelho_2013'`, onde √© utilizado `utf8_decode` para codificar os dados. 

---

```php
<?php

namespace cncflora\reports;

class Occurrences {
    private $fields = ['familia aceita', 'nome aceito'];
    private $fieldsArray = [
        "occurrenceID" => "id da ocorr√™ncia",
        "bibliographicCitation" => "literatura",
        // Adicione outros campos aqui
    ];

    private $repoOcc;
    private $repoTaxon;

    public function __construct($checklist) {
        $this->fields = array_merge($this->fields, array_keys($this->fieldsArray));
        $this->repoOcc = new \cncflora\repository\Occurrences($checklist);
        $this->repoTaxon = new \cncflora\repository\Taxon($checklist);
    }

    public function run($csv, $checklist, $family = null, $specie = null) {
        fputcsv($csv, $this->fields, ';');

        $families = ($family === null) ? $this->repoTaxon->listFamilies() : [$family];

        $got = [];
        foreach ($families as $f) {
            $species = ($specie === null) ? $this->repoTaxon->listFamily($f) : [$this->repoTaxon->getSpecie($specie)];
            $this->processSpecies($csv, $species, $got, $f, $checklist);
        }
    }

    private function processSpecies($csv, $species, &$got, $family, $checklist) {
        foreach ($species as $spp) {
            $scientificNameWithoutAuthorship = $spp['scientificNameWithoutAuthorship'];
            $occs = $this->flattenOccurrences($scientificNameWithoutAuthorship);
            $this->processOccurrences($csv, $occs, $got, $family, $scientificNameWithoutAuthorship, $checklist);
        }
    }

    private function flattenOccurrences($scientificNameWithoutAuthorship) {
        $names = $this->repoTaxon->listNames($scientificNameWithoutAuthorship);
        return $this->repoOcc->flatten($this->repoOcc->listOccurrences($names, false));
    }

    private function processOccurrences($csv, $occs, &$got, $family, $scientificNameWithoutAuthorship, $checklist) {
        foreach ($occs as $occ) {
            $id = $occ['occurrenceID'];
            if (isset($got[$id])) {
                continue;
            }
            $got[$id] = true;
            $data = [$family, $scientificNameWithoutAuthorship];
            $this->processFieldsArray($data, $occ, $checklist);
            fputcsv($csv, $data, ';');
        }
    }

    private function processFieldsArray(&$data, $occ, $checklist) {
        foreach ($this->fieldsArray as $key => $name) {
            $value = isset($occ[$key]) ? $occ[$key] : '';
            if ($key == "concatCollectionCode_CatalogNumber") {
                $value = $occ['collectionCode'] . $occ['catalogNumber'];
            }
            if ($checklist == 'livro_vermelho_2013') {
                $value = utf8_decode($value);
            }
            $data[] = str_replace(["\n", "\r", ";", ","], ' ', $value);
        }
    }
}

```

# Outro exmeplo real

---
**Observe o c√≥digo**

```php
<?php

namespace cncflora\reports;

class Biomas {

  public $title = "Biomas";
  public $description = "Lista de biomas por esp√©cie.";
  public $is_private = false;
  public $fields = ["familia","nome cient√≠fico","bioma"];
  public $filters=["checklist","family"];

  function run($csv,$checklist="",$family=null,$specie=null) {
    fputcsv($csv,$this->fields);

    $repo=new \cncflora\repository\Profiles($checklist);

    if($family!=null) {
      $profiles=$repo->listFamily($family);
    } else {
      $profiles=$repo->listAll();
    }
    foreach($profiles as $d) {
      if(isset($d["ecology"]) && isset($d["ecology"]["biomas"]) && is_array($d["ecology"]["biomas"])) {
        foreach($d["ecology"]["biomas"] as $t) {
          $data = [$d["taxon"]["family"],$d["taxon"]["scientificNameWithoutAuthorship"],$t];
          fputcsv($csv,$data);
        }
      }
    }
  }
}
```
## Refatora√ß√£o
```php
<?php

namespace cncflora\reports;

class Biomas {
    public $title = "Biomas";
    public $description = "Lista de biomas por esp√©cie.";
    public $is_private = false;
    public $fields = ["familia", "nome cient√≠fico", "bioma"];
    public $filters = ["checklist", "family"];

    public function run($csv, $checklist = "", $family = null, $specie = null) {
        fputcsv($csv, $this->fields);

        $repo = new \cncflora\repository\Profiles($checklist);

        $profiles = ($family !== null) ? [$repo->listFamily($family)] : $repo->listAll();

        foreach ($profiles as $profile) {
            $this->processProfile($csv, $profile);
        }
    }

    private function processProfile($csv, $profile) {
        $ecology = $profile["ecology"] ?? null;
        $biomas = $ecology["biomas"] ?? null;

        if (is_array($biomas)) {
            foreach ($biomas as $bioma) {
                $data = [
                    $profile["taxon"]["family"],
                    $profile["taxon"]["scientificNameWithoutAuthorship"],
                    $bioma
                ];
                fputcsv($csv, $data);
            }
        }
    }
}
```

## Tratando erros

```php
private function processProfile($csv, $profile) {
    try {
        $ecology = $profile["ecology"] ?? null;
        $biomas = $ecology["biomas"] ?? null;

        if (!is_array($biomas)) {
            throw new ProfileProcessingException("Biomas n√£o s√£o um array.");
        }

        foreach ($biomas as $bioma) {
            $data = [
                $profile["taxon"]["family"],
                $profile["taxon"]["scientificNameWithoutAuthorship"],
                $bioma
            ];
            fputcsv($csv, $data);
        }
    } catch (ProfileProcessingException $e) {
        // Lidar com a exce√ß√£o aqui, por exemplo, registrar ou lan√ßar novamente.
        // Voc√™ pode usar $e->getMessage() para obter a mensagem de erro.
        // Exemplo de tratamento de erro:
        // echo "Erro no processamento do perfil: " . $e->getMessage();
        // ou lan√ßar novamente a exce√ß√£o se desejar que outros n√≠veis de c√≥digo lidem com ela.
        // throw $e;
    }
}
```

## Melhorando o IF de erro

```php
private function processProfile($csv, $profile) {
    try {
        $ecology = $profile["ecology"] ?? null;
        $biomas = $ecology["biomas"] ?? null;
        $biomaHasNoData = !is_array($biomas);

        if ($biomaHasNoData) {
            throw new ProfileProcessingException("Biomas n√£o s√£o um array.");
        }

        foreach ($biomas as $bioma) {
            $data = [
                $profile["taxon"]["family"],
                $profile["taxon"]["scientificNameWithoutAuthorship"],
                $bioma
            ];
            fputcsv($csv, $data);
        }
    } catch (ProfileProcessingException $e) {
        // Lidar com a exce√ß√£o aqui, por exemplo, registrar ou lan√ßar novamente.
        // Voc√™ pode usar $e->getMessage() para obter a mensagem de erro.
        // Exemplo de tratamento de erro:
        // echo "Erro no processamento do perfil: " . $e->getMessage();
        // ou lan√ßar novamente a exce√ß√£o se desejar que outros n√≠veis de c√≥digo lidem com ela.
        // throw $e;
    }
}

```

# Features Flags
√â uma t√©cnica que permite, dentre outras coisas: que seja poss√≠vel ativar ou desativar uma funcionalidade em produ√ß√£o em tempo real sem fazer deploy.

# Exemplo
```javascript
function calculateEOO(occurrences){
  // implementa√ß√£o de c√°lculo de EOO
}
```

Situa√ß√£o problema: Precisamos testar em produ√ß√£o o novo c√°lculo de EOO.

# Resolvendo a situa√ß√£o
```javascript
function calculateEOO(occurrences){
  const useNewCalculateEOO = false;

  if(useNewCalculateEOO){
    return newCalculateEOO(occurrences)
  }else{
    return oldCalculateEOO(occurrences)
  }
}

function newCalculateEOO(occurrences){
  // faz o novo calculo de EOO
}

function oldCalculateEOO(occurrences){
  // essa √© a implementa√ß√£o antiga
  // que se chamava calculateEOO
}
```

## Flag com arquivo de configura√ß√£o

1. Criando um arquivo de configura√ß√£o:
```javascript
//arquivo de configura√ß√£o feature-flag-config
export default const featureFlagConfig = {
  useNewCalculateEOO: true
}

// arquivo onde implementa o calculo de EOO
import {featureFlagConfig} from 'feature-flag-config';

function calculateEOO(occurrences){
  const useNewCalculateEOO = featureFlagConfig.useNewCalculateEOO;
  // restante da implementa√ß√£o
}
```

## Flag din√¢mica

1. Cria uma l√≥gica para determinar se a flag est√° habilitada ou n√£o baseado no usu√°rio;

```javascript

function calculateEOO(occurrences){

  const useNewCalculateEOO = featureFlagByUser('useNewCalculateEOO', $userId);
  // restante da implementa√ß√£o
}
```

## Cuidados ao usar feature flags

- Tenha regras claras para ativar ou desativar as flags. Considere usar m√©tricas ou crit√©rios espec√≠ficos para decidir quando uma funcionalidade deve ser ativada ou desativada.
- Quando uma feature flag n√£o for mais necess√°ria, remova o c√≥digo associado a ela. N√£o deixe c√≥digo morto no aplicativo.
- Documente claramente todas as feature flags, incluindo seu prop√≥sito, quem as controla e como elas devem ser usadas. Isso ajuda a evitar confus√£o e erros.

# O que √© um padr√£o de projeto?

Padr√µes de projeto s√£o solu√ß√µes em n√≠vel de design para problemas recorrentes que os engenheiros de software encontram com frequ√™ncia.


# Tipos de padr√µes de projetos

## Criacionais

Padr√µes criados para a instancia√ß√£o de classes. Eles podem tanto ser padr√µes de cria√ß√£o de classes como de cria√ß√£o de objetos.

Exemplos: Factory, Prototype, Singleton. 


## Estruturais

Padr√µes criado levando em conta a estrutura de uma classe e sua composi√ß√£o. O objetivo principal da maioria desses padr√µes √© aumentar a funcionalidade das classes envolvidas, sem alterar muito de sua composi√ß√£o.

Exemplos: Adapter, Facade, Decorator, Composite.

## Comportamentais

Padr√µes criados levando em conta a forma como uma classe se comunica com as outras.

Exemplos: Observer, Memento, Strategy.


# Adapter Pattern (estrutural)

Adapter Pattern tem exatamente a mesma fun√ß√£o, conectar dois pontos incompat√≠veis entre si.


## Situa√ß√£o problema
Considere que tem hoje um sistema de log que salva em um arquivo local todas as informa√ß√µes geradas pela aplica√ß√£o, e que esse possui a seguinte interface e implementa√ß√£o:

```typescript
interface Logger {
  info(message: string): Promise<void>;
}

class FileLogger implements Logger {
  public async info(message: string): Promise<void> {
    console.info(message);
    console.info('This Message was saved with FileLogger');
  }
}
```
#
Essa mesma implementa√ß√£o √© usada por todo o sistema e sempre gerado um log o mesmo √© tratado por essa classe FileLogger como no exemplo abaixo:

```typescript
class NotificationService {
  protected logger: Logger;
  
  constructor (logger: Logger) {    
    this.logger = logger;
  }

  public async send(message: string): Promise<void> {
    //... Implementation
    await this.logger.info(`Notification sended: ${message}`);
  }
}

// Inicializa√ß√£o com o FileLogger
(async () => {
  const fileLogger = new FileLogger();
  const notificationService = new NotificationService(fileLogger);
  await notificationService.send('My notification');
})();
```

## Situa√ß√£o problema

Agora precisamos usar uma nova forma de salvar os logs, pois com o crescimento de nossa aplica√ß√£o, salvar em disco n√£o √© mais uma alternativa, assim precisamos usar a AWS.
```typescript
interface CloudLogger {
  sendToServer(message: string, type: string): Promise<void>;
}

class AwsLogger implements CloudLogger {
  public async sendToServer(message: string, type: string): Promise<void> {
    console.info(message);
    console.info('This Message was saved with AwsLogger');
  }
}
```
Ou seja, para que possamos usar essa nova classe precisar√≠amos refatorar todo nosso c√≥digo para usar o novo formato de envio de log ... üí©

## ou usamos um adaptador

```typescript
class CloudLoggerAdapter implements Logger {
  protected cloudLogger: CloudLogger;

  constructor (cloudLogger: CloudLogger) {
    this.cloudLogger = cloudLogger;
  }

  public async info(message: string): Promise<void> {
    await this.cloudLogger.sendToServer(message, 'info');
  }
}
```
#
antes
```typescript
// Inicializa√ß√£o com o FileLogger
(async () => {
  const fileLogger = new FileLogger();
  const notificationService = new NotificationService(fileLogger);
  await notificationService.send('My notification');
})();
```
depois
```typescript
// Inicializa√ß√£o com o AwsLogger
(async () => {
  const awsLogger = new AwsLogger();
  const cloudLoggerAdapter = new CloudLoggerAdapter(awsLogger);
  const notificationService = new NotificationService(cloudLoggerAdapter);
  await notificationService.send('My notification');
})();
```

# Strategy (comportamental)

Utilize o Strategy quando voc√™ tem muitas classes parecidas que somente diferem na forma que elas executam algum comportamento.